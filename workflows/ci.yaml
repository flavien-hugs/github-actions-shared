name: "Check quality code, tests, bump version and create image docker"

on:
  push:
    branches: ["main", "preprod", "develop"]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+_RC'
  pull_request:
    branches: ["main", "develop", "preprod"]

jobs:
  quality-code:
    name: "Quality code"
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12.3']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'Setup Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: 'Setup cache pip and poetry'
        uses: ./.github/actions/cache-package
        with:
          cache-key: ${{ runner.os }}-pip-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: 'Setup python environment'
        uses: ./.github/actions/setup-python

      - name: 'Install dependencies'
        run: poetry add black flake8 bandit

      - name: 'Run black'
        run: poetry run black . --check

      - name: 'Run flake8'
        run: poetry run flake8 .

      - name: 'Run bandit'
        run: poetry run bandit .

  tests:
    needs: [quality-code]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.12.3"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    environment:
      name: "tests"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GH_SUBMODULE_TOKEN }}
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
      
      - name: 'Setup cache pip and poetry'
        uses: ./.github/actions/cache-package
        with:
          cache-key: ${{ runner.os }}-pip-poetry-${{ hashFiles('**/poetry.lock') }}
      
      - name: 'Install pipx, Poetry and Upgrade pip/setuptools'
        uses: ./.github/actions/setup-python
      
      - name: "Run Tests"
        run: |
          echo "Starting tests ..."
          poetry run pytest --cov --cov-report term --cov-report xml:coverage.xml tests

      - name: "Upload coverage report"
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  bump-version:
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    outputs:
      new_version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Bump version using semantic-release"
        id: semantic-release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GH_SUBMODULE_TOKEN }}

      - name: "Extract new version"
        id: extract-version
        run: |
          echo "Get the latest tag created by semantic-release ..."
          VERSION=$(git describe --tags --abbrev=0)
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  
  create-docker-image:
    needs: [bump-version]
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref == 'refs/heads/main' && 'latest') || (github.ref == 'refs/heads/preprod' && 'preprod') || 'dev' }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_SUBMODULE_TOKEN }}

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.3"

      - name: "Install Poetry"
        run: pip install poetry

      - name: "Ensure poetry.lock exists"
        run: |
          if [ ! -f poetry.lock ]; then
            echo "poetry.lock missing → generating it"
            poetry lock
          else
            echo "poetry.lock found"
          fi

      - name: "Login to Docker registry"
        run: |
          echo "${{ secrets.GHRC_PASSWORD }}" | \
            docker login ghcr.io -u ${{ secrets.GHRC_USERNAME }} --password-stdin

      - name: "Determine image tag and build"
        run: |
          VERSION="${{ needs.bump-version.outputs.new_version }}"

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            CLEAN_VERSION=${VERSION#v}
            CLEAN_VERSION=${CLEAN_VERSION/_RC/-rc}
            echo "Detected TAG push → version: $CLEAN_VERSION"

            docker build -t ${{ secrets.GHRC_REGISTRY_ADDR }}:$CLEAN_VERSION .
            docker push ${{ secrets.GHRC_REGISTRY_ADDR }}:$CLEAN_VERSION

            echo "Also tagging 'latest'"
            docker tag ${{ secrets.GHRC_REGISTRY_ADDR }}:$CLEAN_VERSION ${{ secrets.GHRC_REGISTRY_ADDR }}:latest
            docker push ${{ secrets.GHRC_REGISTRY_ADDR }}:latest
            exit 0
          fi

          CLEAN_VERSION=${VERSION#v}
          echo "Using version: $CLEAN_VERSION"

          BRANCH_NAME="${{ github.ref_name }}"
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            DOCKER_TAGS=("latest")
          elif [[ "$BRANCH_NAME" == "preprod" ]]; then
            DOCKER_TAGS=("preprod")
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            DOCKER_TAGS=("dev")
          else
            echo "No valid tag found for branch $BRANCH_NAME, exiting..."
            exit 1
          fi

          echo "Building Docker image with tags: ${DOCKER_TAGS[@]}"
          docker build -t ${{ secrets.GHRC_REGISTRY_ADDR }}:${DOCKER_TAGS[0]} .

          for tag in "${DOCKER_TAGS[@]:1}"; do
            docker tag ${{ secrets.GHRC_REGISTRY_ADDR }}:${DOCKER_TAGS[0]} ${{ secrets.GHRC_REGISTRY_ADDR }}:$tag
          done

          for tag in "${DOCKER_TAGS[@]}"; do
            docker push ${{ secrets.GHRC_REGISTRY_ADDR }}:$tag
          done

          echo "Build and push completed successfully"
