name: "Build and push Docker image"
description: "Build and push Docker image with proper tagging"

inputs:
  registry:
    description: "Docker registry (ex: ghcr.io/org/repo)"
    required: true
  username:
    description: "Registry username"
    required: true
  password:
    description: "Registry password or token"
    required: true
  version:
    description: "Version to use (from bump-version output or tag)"
    required: true

outputs:
  image:
    description: "Full image name with primary tag"
    value: ${{ steps.meta.outputs.image }}
  tags:
    description: "All tags applied"
    value: ${{ steps.meta.outputs.tags }}

runs:
  using: "composite"
  steps:
    - name: "Set Git ref info"
      id: ref
      shell: bash
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "ref_type=tag" >> $GITHUB_OUTPUT
            echo "ref_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
            echo "ref_type=branch" >> $GITHUB_OUTPUT
            echo "ref_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi
    
    - name: "Login to Docker registry"
      shell: bash
      run: |
        REGISTRY_HOST="${{ inputs.registry }}"
        if [[ "$REGISTRY_HOST" == *"/"* ]]; then
          REGISTRY_HOST="${REGISTRY_HOST%%/*}"
        fi
        echo "${{ inputs.password }}" | \
          docker login "$REGISTRY_HOST" -u ${{ inputs.username }} --password-stdin

    - name: "Determine image tag(s) and build"
      id: meta
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        REF_NAME="${{ steps.ref.outputs.ref_name }}"
        REF_TYPE="${{ steps.ref.outputs.ref_type }}"
        IMAGE="${{ inputs.registry }}"
        
        TAGS=()
        
        if [[ "$REF_TYPE" == "tag" ]]; then
            CLEAN_VERSION=${VERSION#v}
            CLEAN_VERSION=${CLEAN_VERSION/_RC/-rc}
            TAGS+=("$CLEAN_VERSION" "latest")
            echo "Detected TAG push â†’ version: $CLEAN_VERSION"
        else
            CLEAN_VERSION=${VERSION#v}
            case "$REF_NAME" in
              main|master) TAGS+=("latest");;
              preprod)     TAGS+=("preprod");;
              develop)     TAGS+=("dev");;
              *) echo "No valid tag for branch $REF_NAME"; exit 1;;
            esac
        fi
        
        echo "Building Docker image with tags: ${TAGS[*]}"
        docker build -t "$IMAGE:${TAGS[0]}" .
        
        for tag in "${TAGS[@]:1}"; do
            docker tag "$IMAGE:${TAGS[0]}" "$IMAGE:$tag"
        done
        
        for tag in "${TAGS[@]}"; do
            docker push "$IMAGE:$tag"
        done
        
        echo "image=$IMAGE:${TAGS[0]}" >> $GITHUB_OUTPUT
        echo "tags=${TAGS[*]}" >> $GITHUB_OUTPUT
